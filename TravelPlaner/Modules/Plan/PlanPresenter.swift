//
//  PlanPresenter.swift
//  TravelPlaner
//
//  Created by Nikola Simunko on 18/08/2017.
//  Copyright (c) 2017 Nikola Simunko. All rights reserved.
//
//  This file was generated by the 游냀 VIPER generator
//

import UIKit

enum PlanItem {
    case dateItem(PlanDateCellItem)
    case locationItem(PlanLocationCellItem)
    case forecastItem(PlanForecastCellItem)
    case galleryItem(PlanGalleryCellItem)
    case saveButtonItem
}

final class PlanPresenter: NSObject {
    
    // MARK: - Private properties -

    fileprivate weak var _view: PlanViewInterface?
    fileprivate var _interactor: PlanInteractorInterface
    fileprivate var _wireframe: PlanWireframeInterface
    
    fileprivate var _plan: ExtraPlanInfoItem?
    
    fileprivate var _items = [PlanItem]()
    
    fileprivate var _forecast = [DayForecastCellItem]()
    fileprivate var _gallery = [GettyImage]()
    
    fileprivate var _startDate: Date?
    fileprivate var _endDate: Date?
    fileprivate var _location: String?
    
    // MARK: - Lifecycle -
    
    init (wireframe: PlanWireframeInterface, view: PlanViewInterface, interactor: PlanInteractorInterface, planInfoItem: ExtraPlanInfoItem? = nil) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
        _plan = planInfoItem
    }

    // MARK: - Private functions -
    
    fileprivate func _loadData() {
        _items.removeAll()
        _forecast.removeAll()
        _gallery.removeAll()
        
        if let plan = _plan {
            _items.append(PlanItem.dateItem(PlanDateCellItem(startDate: plan.dateFrom, endDate: plan.dateTo)))
            _items.append(PlanItem.locationItem(PlanLocationCellItem(location: plan.location)))
            
            // Fetch weather forecast data from OWM api
            _view?.showLoading()
            
            _interactor.getForecast(plan.location) { [weak self] result in
                switch result {
                case .success(let forecastResponse):
                    self?._handle(forecastResponse)
                case .failure(let error):
                    self?._view?.hideLoading()
                    self?._wireframe.showAlert(title: "Ups", message: "Do코lo je do pogre코ke kod dohva캖anja vremenske prognoze.", actions: nil)
                    print(error.localizedDescription)
                }
            }
            
            _interactor.getImages(plan.location) { [weak self] result in
                switch result {
                case .success(let galleryResponse):
                    self?._handle(galleryResponse)
                case .failure(let error):
                    self?._view?.hideLoading()
                    self?._wireframe.showAlert(title: "Ups", message: "Do코lo je do pogre코ke kod dohva캖anja galerije slika.", actions: nil)
                    print(error.localizedDescription)
                }
            }
            
            _view?.reloadData()
            
        } else {
            _items.append(PlanItem.dateItem(PlanDateCellItem(startDate: Date(), endDate: Date())))
            _items.append(PlanItem.locationItem(PlanLocationCellItem(location: "")))
            
            _startDate = Date()
            _endDate = Date()
            _view?.reloadData()
        }
    }
    
    fileprivate func _checkPlanData() {
        if let startDate = _startDate, let endDate = _endDate, let location = _location, startDate <= endDate {
            let ID: String
            
            if let id = _plan?.ID {
                ID = id
            } else {
                ID = ""
            }
            
            _plan = ExtraPlanInfoItem(ID: ID, location: location, dateFrom: startDate, dateTo: endDate)
            _loadData()
        }
    }
    
    fileprivate func _handle(_ forecastResponse: OpenWeatherMapForecastResponse) {
        var forecast = [DayForecastCellItem]()
        
        for item in forecastResponse.list {
            if let weatherObject = item.weather.first, let weather = WeatherConditions.getWeatherFrom(apiKey: weatherObject.ID) {
                forecast.append(DayForecastCellItem(day: weather.title, temp: item.temp.day, weather: weather.title, image: weather.icon))
            } else {
                forecast.append(DayForecastCellItem(day: "N/A", temp: 0, weather: "N/A", image: #imageLiteral(resourceName: "weather_mist")))
            }
        }
        
        _forecast = forecast
        _showResponseData()
    }
    
    fileprivate func _handle(_ galleryResponse: GettyImagesGalleryResponse) {
        _gallery = galleryResponse.images
        _showResponseData()
    }
    
    fileprivate func _showResponseData() {
        if !_forecast.isEmpty && !_gallery.isEmpty {
            _items.append(PlanItem.forecastItem(PlanForecastCellItem(forecast: _forecast)))
            _items.append(PlanItem.galleryItem(PlanGalleryCellItem(images: _gallery)))
            _items.append(PlanItem.saveButtonItem)
            _view?.reloadData()
            _view?.hideLoading()
        }
    }
    
}

// MARK: - Extensions -

extension PlanPresenter: PlanPresenterInterface {
    
    func didSelectNavigationAction(action: PlanNavigationAction) {
        _wireframe.performNavigationAction(action: action)
    }
    
    func numberOfSections() -> Int {
        return 1
    }
    
    func numberOfItems(in section: Int) -> Int {
        return _items.count
    }
    
    func item(for indexPath: IndexPath) -> PlanItem {
        return _items[indexPath.row]
    }
    
    func locations() -> [String] {
        if let locations = _interactor.loadLocations() {
            return locations
        } else {
            return []
        }
    }
    
    func viewDidLoad() {
        _loadData()
    }
    
    func didSetPlanDates(start: Date, end: Date) {
        _startDate = start
        _endDate = end
        _checkPlanData()
    }
    
    func didSetPlanLocation(_ location: String) {
        _location = location
        _checkPlanData()
    }
    
    func didTapSavePlanButton() {
        guard let plan = _plan else {
            return
        }
        
        _view?.showLoading()
        _interactor.save(plan: plan) { [weak self] result in
            self?._view?.hideLoading()
            if result {
                NotificationCenter.default.post(name: Notification.Name(rawValue: Constants.NotificationCenterIdentifiers.DidAddNewPlanNotification), object: nil, userInfo: nil)
                self?._wireframe.performNavigationAction(action: .back)
            }
        }
    }
    
}
