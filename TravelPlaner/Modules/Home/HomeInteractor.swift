//
//  HomeInteractor.swift
//  TravelPlaner
//
//  Created by Nikola Simunko on 14/08/2017.
//  Copyright (c) 2017 Nikola Simunko. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import GoogleAPIClientForREST

final class HomeInteractor: NSObject {

    // MARK: - Private functions -
    
}

// MARK: - Extensions -

extension HomeInteractor: HomeInteractorInterface {
    
    func loadPlans() -> [ExtraPlanInfoItem] {
        guard let savedPlanData = UserDefaults.standard.object(forKey: Constants.UserDefaultsKeys.SavedPlans) as? [String] else {
            return []
        }
        
        var plans = [ExtraPlanInfoItem]()
        
        for item in savedPlanData {
            let decodedPlan = item.components(separatedBy: "-")
            let ID = decodedPlan[0]
            let location = decodedPlan[1]
            let dateFrom = DateFormatter.shared.date(from: decodedPlan[2], withFormat: DateFormat.defaultFormat)!
            let dateTo = DateFormatter.shared.date(from: decodedPlan[3], withFormat: DateFormat.defaultFormat)!
            
            let plan = ExtraPlanInfoItem(ID: ID, location: location, dateFrom: dateFrom, dateTo: dateTo)
            
            plans.append(plan)
        }
        
        return plans
    }
    
    func save(plans: [ExtraPlanInfoItem]) {
        var encodedPlans = [String]()
        
        for plan in plans {
            encodedPlans.append(plan.encodedPlanData())
        }
        
        UserDefaults.standard.set(encodedPlans, forKey: Constants.UserDefaultsKeys.SavedPlans)
    }
    
    func delete(plan: ExtraPlanInfoItem, completion: @escaping (Bool) -> Void) {
        guard let service = GoogleService.shared.gService, !plan.ID.isEmpty else {
            return
        }
        
        let query = GTLRCalendarQuery_EventsDelete.query(withCalendarId: "primary", eventId: plan.ID)
        
        service.executeQuery(query) { [weak self] (ticket, object, error) in
            if let error = error {
                print(error.localizedDescription)
                completion(false)
            } else {
                var plans = (self?.loadPlans())!
                plans = plans.filter({ $0.ID != plan.ID })
                self?.save(plans: plans)
                completion(true)
            }
        }
    }
    
}
