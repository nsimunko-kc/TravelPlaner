//
//  HomePresenter.swift
//  TravelPlaner
//
//  Created by Nikola Simunko on 14/08/2017.
//  Copyright (c) 2017 Nikola Simunko. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class HomePresenter: NSObject {
    
    // MARK: - Private properties -

    fileprivate weak var _view: HomeViewInterface?
    fileprivate var _interactor: HomeInteractorInterface
    fileprivate var _wireframe: HomeWireframeInterface
    
    fileprivate var _items = [ExtraPlanInfoItem]()
    
    // MARK: - Lifecycle -
    
    init (wireframe: HomeWireframeInterface, view: HomeViewInterface, interactor: HomeInteractorInterface) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
        super.init()
        _configureNotifications()
    }

    // MARK: - Private functions -
    
    fileprivate func _loadData() {
        _view?.showLoading()
        _items = _interactor.loadPlans()
        _items.sort { $0.dateFrom < $1.dateFrom }
        _view?.reloadData()
        _view?.hideLoading()
    }
    
    fileprivate func _configureNotifications() {
        NotificationCenter.default.addObserver(self, selector: #selector(_handleNotifications(_:)), name: NSNotification.Name(rawValue: Constants.NotificationCenterIdentifiers.DidAddNewPlanNotification), object: nil)
    }
    
    @objc fileprivate func _handleNotifications(_ notification: Notification) {
        _loadData()
    }
    
}

// MARK: - Extensions -

extension HomePresenter: HomePresenterInterface {
    
    func didSelectNavigationAction(action: HomeNavigationAction) {
        _wireframe.performNavigationAction(action: action)
    }
    
    func didSelectNewPlanAction() {
        _wireframe.performNavigationAction(action: .newPlanAction)
    }
    
    func numberOfSections() -> Int {
        return 1
    }
    
    func numberOfRows(in section: Int) -> Int {
        return _items.count
    }
    
    func item(at indexPath: IndexPath) -> ExtraPlanInfoItem {
        return _items[indexPath.row]
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        _wireframe.performNavigationAction(action: .editPlanAction(_items[indexPath.row]))
    }
    
    func didDeleteItem(at indexPath: IndexPath) {
        _items.remove(at: indexPath.row)
        _interactor.save(plans: _items)
        
        // TODO: Remove plan event form GCalendar
    }
    
    func viewDidLoad() {
        _loadData()
    }
    
}
