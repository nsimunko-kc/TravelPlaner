//
//  HomeWireframe.swift
//  TravelPlaner
//
//  Created by Nikola Simunko on 14/08/2017.
//  Copyright (c) 2017 Nikola Simunko. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

struct HomeContext {
}

final class HomeWireframe: NSObject {
    
    // MARK: - Private properties -

    private var _context: HomeContext?
    private let _storyboard: UIStoryboard = UIStoryboard(name: Constants.StoryboardIdentifiers.Home, bundle: nil)
    
    // MARK: - Public properties -
    
    weak var navigationController: UINavigationController?
    weak var viewController: UIViewController?
    
    // MARK: - Lifecycle -
    
    init(navigationController: UINavigationController? = nil, context: HomeContext? = nil) {
        super.init()
        _context = context
        self.navigationController = navigationController
    }
    
    // MARK: - Module setup -
    
    func instantiateAndConfigureModule() -> UIViewController {
        guard let viewController = _storyboard.instantiateViewController(withIdentifier: Constants.ViewControllerIdentifiers.Home) as? HomeViewController else {
            fatalError("No view controller found with the following identifier: \(Constants.ViewControllerIdentifiers.Home)")
        }
        
        configureModuleWithViewController(viewController: viewController)
        viewController.configureTabBarItem()
        
        return viewController
    }
    
    func configureModuleWithViewController(viewController: HomeViewController) {
        let interactor = HomeInteractor()
        let presenter = HomePresenter(wireframe: self, view: viewController, interactor: interactor)
        viewController.presenter = presenter
        self.viewController = viewController
    }

}

// MARK: - Extensions -

extension HomeWireframe: HomeWireframeInterface {
    
    func performNavigationAction(action: HomeNavigationAction) {
        switch action {
        case .newPlanAction:
            let wireframe = PlanWireframe()
            let viewController = wireframe.instantiateAndConfigureModule()
            navigationController?.pushViewController(viewController, animated: true)
        case .editPlanAction(let plan):
            let wireframe = PlanWireframe(PlanContext(plan: plan))
            let viewController = wireframe.instantiateAndConfigureModule()
            navigationController?.pushViewController(viewController, animated: true)
        }
    }

}
